// <autogenerated>
//   This file was generated by T4 code generator ContractsCodeScript.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using OSharp.Core;
using OSharp.Utility.Data;
using System.Linq.Expressions;
using System.Threading.Tasks;
using OSharp.Core.Dependency;
using Bode.Services.Core.Dtos.Industry;
using Bode.Services.Core.Models.Industry;

namespace Bode.Services.Core.Contracts
{
	public partial interface IIndustryContract : IScopeDependency
	{
		                #region Trade信息业务

                IQueryable<Trade> Trades { get; }

                /// <summary>
                /// 保存Trade信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的TradeDto信息</param>
                /// <returns>业务操作集合</returns>
                Task<OperationResult> SaveTrades(bool updateForeignKey=false,params TradeDto[] dtos);

                /// <summary>
                /// 删除Trade信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                Task<OperationResult> DeleteTrades(params int[] ids);

                #endregion

                                #region Position信息业务

                IQueryable<Position> Positions { get; }

                /// <summary>
                /// 保存Position信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的PositionDto信息</param>
                /// <returns>业务操作集合</returns>
                Task<OperationResult> SavePositions(bool updateForeignKey=false,params PositionDto[] dtos);

                /// <summary>
                /// 删除Position信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                Task<OperationResult> DeletePositions(params int[] ids);

                #endregion

                                #region Education信息业务

                IQueryable<Education> Educations { get; }

                /// <summary>
                /// 保存Education信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的EducationDto信息</param>
                /// <returns>业务操作集合</returns>
                Task<OperationResult> SaveEducations(bool updateForeignKey=false,params EducationDto[] dtos);

                /// <summary>
                /// 删除Education信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                Task<OperationResult> DeleteEducations(params int[] ids);

                #endregion

                                #region Profession信息业务

                IQueryable<Profession> Professions { get; }

                /// <summary>
                /// 保存Profession信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的ProfessionDto信息</param>
                /// <returns>业务操作集合</returns>
                Task<OperationResult> SaveProfessions(bool updateForeignKey=false,params ProfessionDto[] dtos);

                /// <summary>
                /// 删除Profession信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                Task<OperationResult> DeleteProfessions(params int[] ids);

                #endregion

                	}
}
