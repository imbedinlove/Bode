// <autogenerated>
//   This file was generated by T4 code generator ServicesCodeScript.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using OSharp.Core;
using OSharp.Core.Data;
using OSharp.Utility;
using OSharp.Utility.Data;
using OSharp.Utility.Extensions;
using System.Linq.Expressions;
using System.Threading.Tasks;

using Bode.Services.Core.Contracts;
using Bode.Services.Core.Dtos.Delivery;
using Bode.Services.Core.Models.Delivery;

namespace Bode.Services.Implement.Services
{
	public partial class DeliveryService : IDeliveryContract
	{
		                #region Region信息业务

                public IRepository<Region, int> RegionRepo { protected get; set; }

                public IQueryable<Region> Regions
                {
                    get { return RegionRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存Region信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的RegionDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveRegions(bool updateForeignKey=false,params RegionDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        RegionRepo.UnitOfWork.TransactionEnabled = true;

                        Action<RegionDto> checkAction=null;
                        Func<RegionDto, Region, Region> updateFunc=null;
                        if (addDtos.Length > 0)
                        {
                            RegionRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            RegionRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await RegionRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除Region信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteRegions(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await RegionRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region Area信息业务

                public IRepository<Area, int> AreaRepo { protected get; set; }

                public IQueryable<Area> Areas
                {
                    get { return AreaRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存Area信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的AreaDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveAreas(bool updateForeignKey=false,params AreaDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        AreaRepo.UnitOfWork.TransactionEnabled = true;

                        Action<AreaDto> checkAction=null;
                        Func<AreaDto, Area, Area> updateFunc=null;
                        if (addDtos.Length > 0)
                        {
                            AreaRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            AreaRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await AreaRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除Area信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteAreas(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await AreaRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region City信息业务

                public IRepository<City, int> CityRepo { protected get; set; }

                public IQueryable<City> Citys
                {
                    get { return CityRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存City信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的CityDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveCitys(bool updateForeignKey=false,params CityDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        CityRepo.UnitOfWork.TransactionEnabled = true;

                        Action<CityDto> checkAction=null;
                        Func<CityDto, City, City> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.Province = ProvinceRepo.GetByKey(dto.ProvinceId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            CityRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            CityRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await CityRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除City信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteCitys(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await CityRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region DeliveryAddress信息业务

                public IRepository<DeliveryAddress, int> DeliveryAddressRepo { protected get; set; }

                public IQueryable<DeliveryAddress> DeliveryAddresss
                {
                    get { return DeliveryAddressRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存DeliveryAddress信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的DeliveryAddressDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveDeliveryAddresss(bool updateForeignKey=false,params DeliveryAddressDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        DeliveryAddressRepo.UnitOfWork.TransactionEnabled = true;

                        Action<DeliveryAddressDto> checkAction=null;
                        Func<DeliveryAddressDto, DeliveryAddress, DeliveryAddress> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.UserInfo = UserInfoRepo.GetByKey(dto.UserInfoId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            DeliveryAddressRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            DeliveryAddressRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await DeliveryAddressRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除DeliveryAddress信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteDeliveryAddresss(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await DeliveryAddressRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region FreightTemplate信息业务

                public IRepository<FreightTemplate, int> FreightTemplateRepo { protected get; set; }

                public IQueryable<FreightTemplate> FreightTemplates
                {
                    get { return FreightTemplateRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存FreightTemplate信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的FreightTemplateDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveFreightTemplates(bool updateForeignKey=false,params FreightTemplateDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        FreightTemplateRepo.UnitOfWork.TransactionEnabled = true;

                        Action<FreightTemplateDto> checkAction=null;
                        Func<FreightTemplateDto, FreightTemplate, FreightTemplate> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.Logistics = LogisticsRepo.GetByKey(dto.LogisticsId);
                                                                                entity.Province = ProvinceRepo.GetByKey(dto.ProvinceId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            FreightTemplateRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            FreightTemplateRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await FreightTemplateRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除FreightTemplate信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteFreightTemplates(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await FreightTemplateRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region Logistics信息业务

                public IRepository<Logistics, int> LogisticsRepo { protected get; set; }

                public IQueryable<Logistics> Logisticss
                {
                    get { return LogisticsRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存Logistics信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的LogisticsDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveLogisticss(bool updateForeignKey=false,params LogisticsDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        LogisticsRepo.UnitOfWork.TransactionEnabled = true;

                        Action<LogisticsDto> checkAction=null;
                        Func<LogisticsDto, Logistics, Logistics> updateFunc=null;
                        if (addDtos.Length > 0)
                        {
                            LogisticsRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            LogisticsRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await LogisticsRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除Logistics信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteLogisticss(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await LogisticsRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region Province信息业务

                public IRepository<Province, int> ProvinceRepo { protected get; set; }

                public IQueryable<Province> Provinces
                {
                    get { return ProvinceRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存Province信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的ProvinceDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveProvinces(bool updateForeignKey=false,params ProvinceDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        ProvinceRepo.UnitOfWork.TransactionEnabled = true;

                        Action<ProvinceDto> checkAction=null;
                        Func<ProvinceDto, Province, Province> updateFunc=null;
                        if (addDtos.Length > 0)
                        {
                            ProvinceRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            ProvinceRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await ProvinceRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除Province信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteProvinces(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await ProvinceRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                	}
}
